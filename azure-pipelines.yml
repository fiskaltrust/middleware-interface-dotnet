resources:
  - repo: self

trigger:
  batch: true
  branches:
    include:
      - master
      - refs/tags/*

pr:
  - master

variables:
  - group: 'Code Signing Certificates'
  - name: BuildConfiguration
    value: release
  - name: BuildPlatform
    value: any cpu
  - name: Solution
    value: 'fiskaltrust.Middleware.Interface.sln'

jobs:
  - job: Build
    pool:
      vmImage: windows-latest
    steps:
      - task: UseDotNet@2
        displayName: "Install .NET 6 SDK"
        inputs:
          packageType: "sdk"
          version: "6.x"

      - task: VisualStudioTestPlatformInstaller@1
        displayName: VsTest Platform Installer

      - task: yavt@1
        inputs:
          mode: 'Multi'
          semverVersion: 'v1'

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          feedsToUse: 'select'
          vstsFeed: 'dev'   # TODO Remove before merge

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: '$(Solution)'
          arguments: '--configuration $(BuildConfiguration)'

      - task: SSMClientToolsSetup@1
        # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/storage/v')

      - task: SSMSigningToolsSetup@1
        # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/storage/v')

      - task: DownloadSecureFile@1
        # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/storage/v')
        name: clientCertificate
        displayName: "Download client certificate"
        inputs:
          secureFile: "codesigning_client_cert.p12"

      - pwsh: smctl certificate download --keypair-alias=$(KEYPAIR_ALIAS) --name=KeyCert.pem --out=$(Agent.TempDirectory)
        # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')        
        env:
          SM_HOST: "$(SM_HOST)"
          SM_API_KEY: "$(SM_API_KEY)"
          SM_CLIENT_CERT_PASSWORD: "$(SM_CLIENT_CERT_PASSWORD)"
          SM_CLIENT_CERT_FILE: "$(clientCertificate.secureFilePath)"
          SM_TLS_SKIP_VERIFY: false

      - pwsh: |
          Get-ChildItem -Path "$(Build.SourcesDirectory)" -Include fiskaltrust*.dll, fiskaltrust*.exe -Recurse | ForEach-Object {          
            signtool sign `
                /tr http://timestamp.sectigo.com/?td=sha256 `
                /td SHA256 `
                /fd SHA256 `
                /csp "DigiCert Signing Manager KSP" `
                /kc "$(KEYPAIR_ALIAS)" `
                /f $(Agent.TempDirectory)\KeyCert.pem `
                $_.FullName
          }
          Write-Host $(Get-Content -Path "~\.signingmanager\logs\smksp.log")
        displayName: "Code Signing"
        # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/storage/v')
        env:
          SM_HOST: "$(SM_HOST)"
          SM_API_KEY: "$(SM_API_KEY)"
          SM_CLIENT_CERT_PASSWORD: "$(SM_CLIENT_CERT_PASSWORD)"
          SM_CLIENT_CERT_FILE: "$(clientCertificate.secureFilePath)"
          SM_TLS_SKIP_VERIFY: false

      - script: dotnet test --no-build --configuration $(buildConfiguration)  --test-adapter-path:. --logger:nunit;LogFilePath=TestResults.xml
        displayName: 'dotnet test ifPOS'
        workingDirectory:  'test\fiskaltrust.ifPOS.Tests'

      - script: dotnet test --no-build --configuration $(buildConfiguration)  --test-adapter-path:. --logger:nunit;LogFilePath=TestResults.xml
        displayName: 'dotnet test Clients'
        workingDirectory:  'test\fiskaltrust.Middleware.Interface.Client.Tests'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: '**/*TestResults*.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          buildConfiguration: $(buildConfiguration)

      - task: DotNetCoreCLI@2
        displayName: dotnet pack
        inputs:
          command: 'pack'
          packagesToPack: 'src/**/*.csproj'
          nobuild: true
          versioningScheme: 'off'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'